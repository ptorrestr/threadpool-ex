/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package threadpool.ex;

import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.Lists;

public class App {
	public static final Logger logger = LoggerFactory.getLogger(App.class);
	public static final int numThreads = 2;
	public static final int numTasks = 10;

	/*
	 * Workers function.
	 * It has two parameters.
	 */
	public class Add implements Callable<Integer> {
		private volatile int sum1;
		private volatile int sum2;
		
		public Add(int sum1, int sum2) {
			this.sum1 = sum1;
			this.sum2 = sum2;
		}

		// Function executed by the threads
		@Override
		public Integer call() throws Exception {
			// Print out in order
			synchronized (this) {
				logger.info("Param1 {} Param2: {}", sum1, sum2);
			}
			return sum1 + sum2;
		}
		
	}
	
	public void example() {
		// Create thread pool
		ExecutorService execs = Executors.newFixedThreadPool(numThreads);
		List<Future<Integer>> results = Lists.newArrayList();
		// Assign tasks to pool
		for (int i = 0; i < numTasks; i++) {
			results.add( execs.submit(new Add(i,i) ));
		}
		// Wait for tasks execution
		try {
			execs.awaitTermination(1, TimeUnit.SECONDS);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		// Print results
		logger.info("");
		logger.info("Results");
		for (int i = 0; i < numTasks; i++) {
			try {
				logger.info("Tasks No: {} => {}", i, results.get(i).get());
			} catch (InterruptedException | ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		execs.shutdown();
	}

	public static void main(String[] args) {
		new App().example();
		//System.out.println(new App().getGreeting());
	}
}
